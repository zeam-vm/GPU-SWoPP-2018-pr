.small
	markdown:
		## Flow
		* José Valimが2017年に開発したMapReduceモデルに近い並列プログラミングライブラリ
		* 下記コードは全体として，1から1000までの整数`n`に対し，`bar(foo(n))`を要素とするリストを生成する
ruby:
	def markdown_flow
		Redcarpet::Markdown.new(Redcarpet::Render::HTML, :fenced_code_blocks => true).render(<<"EOS"
	```elixir
	1..1000
		|> Flow.from_enumerable()
		|> Flow.map(foo)
		|> Flow.map(bar)
		|> Enum.to_list
	```
	EOS
		)
	end
== markdown_flow
.small
	markdown:
		* `1..1000`は1から1000までの要素を持つリストを生成する
		* `|>`はパイプライン演算子で，前に与えられたデータを次の関数の第1引数として渡す
		* `Flow.from_enumerable()`は，並列処理するためにリストをプロセッサに分配する
		* `Flow.map(foo)` は，リストの各要素に関数`foo`を適用する(並列に実行される)
		* `Flow.map(bar)` は，リストの各要素に関数`bar`を適用する(並列に実行される)
		* `Enum.to_list` で計算結果を集計してリストに編成する
